{"ast":null,"code":"import { executeQuery } from './neo4jConnection';\n\n// Variable pour stocker les informations sur le crime\nlet crime = {\n  suspect: '',\n  weapon: '',\n  room: ''\n};\nlet crimeInitialized = false; // Ajoutez cette variable\n\n// Fonction pour récupérer l'état initial\nexport async function getInitialState() {\n  if (crimeInitialized) return crime; // Éviter la réinitialisation\n\n  try {\n    const result = await executeQuery(`\n            MATCH (s:Person), (w:Weapon), (r:Room)\n            WITH s, w, r\n            ORDER BY rand()\n            RETURN s.name AS suspect, w.name AS weapon, r.name AS room\n            LIMIT 1\n        `);\n    console.log('Données récupérées:', result);\n    if (!result || !Array.isArray(result) || result.length === 0) {\n      throw new Error('Aucun crime trouvé. Vérifiez que vous avez des suspects, des armes et des pièces dans la base de données.');\n    }\n\n    // Accès au premier enregistrement, s'il existe\n    const record = result[0];\n    if (!record || !record.row) {\n      throw new Error('Format de données inattendu.');\n    }\n\n    // Vérifie la structure et assigne les données du crime\n    crime = {\n      suspect: record.row[0] || '',\n      weapon: record.row[1] || '',\n      room: record.row[2] || ''\n    };\n    console.log('Crime choisi :', crime);\n    crimeInitialized = true; // Indiquer que l'initialisation est faite\n\n    return crime; // Renvoyer l'objet crime\n  } catch (error) {\n    console.error('Erreur lors de la récupération des données:', error);\n    return null; // Renvoyer null en cas d'erreur\n  }\n}\n\n// Fonction pour vérifier l'hypothèse\n// Fonction pour vérifier l'hypothèse\nexport const checkHypothesis = async (suspect, weapon, room, onGameOver) => {\n  try {\n    const isSuspectCorrect = suspect.trim().toLowerCase() === crime.suspect.trim().toLowerCase();\n    const isWeaponCorrect = weapon.trim().toLowerCase() === crime.weapon.trim().toLowerCase();\n    const isRoomCorrect = room.trim().toLowerCase() === crime.room.trim().toLowerCase();\n\n    // Afficher les résultats pour chaque élément\n    console.log(isSuspectCorrect ? \"Le suspect est correct !\" : \"Le suspect est incorrect !\");\n    console.log(isWeaponCorrect ? \"L'arme est correcte !\" : \"L'arme est incorrecte !\");\n    console.log(isRoomCorrect ? \"La salle est correcte !\" : \"La salle est incorrecte !\");\n\n    // Vérifiez si toutes les hypothèses sont correctes\n    if (isSuspectCorrect && isWeaponCorrect && isRoomCorrect) {\n      console.log(\"Vous avez gagné ! Vous avez trouvé le crime !\");\n      onGameOver(); // Terminez le jeu\n    }\n  } catch (error) {\n    console.error('Erreur lors de la vérification de l\\'hypothèse:', error);\n  }\n};\n\n// Fonction pour mettre à jour les informations sur le crime (si nécessaire)\nexport const setCrimeData = newCrime => {\n  crime = newCrime;\n};","map":{"version":3,"names":["executeQuery","crime","suspect","weapon","room","crimeInitialized","getInitialState","result","console","log","Array","isArray","length","Error","record","row","error","checkHypothesis","onGameOver","isSuspectCorrect","trim","toLowerCase","isWeaponCorrect","isRoomCorrect","setCrimeData","newCrime"],"sources":["C:/Users/gelgo/Documents/IUT/BUT3/R5.10 - Nouveaux paradigmes de BDD/cluedo-game/src/gameLogic.js"],"sourcesContent":["import { executeQuery } from './neo4jConnection';\r\n\r\n// Variable pour stocker les informations sur le crime\r\nlet crime = { suspect: '', weapon: '', room: '' };\r\nlet crimeInitialized = false; // Ajoutez cette variable\r\n\r\n// Fonction pour récupérer l'état initial\r\nexport async function getInitialState() {\r\n    if (crimeInitialized) return crime; // Éviter la réinitialisation\r\n\r\n    try {\r\n        const result = await executeQuery(`\r\n            MATCH (s:Person), (w:Weapon), (r:Room)\r\n            WITH s, w, r\r\n            ORDER BY rand()\r\n            RETURN s.name AS suspect, w.name AS weapon, r.name AS room\r\n            LIMIT 1\r\n        `);\r\n        \r\n        console.log('Données récupérées:', result);\r\n\r\n        if (!result || !Array.isArray(result) || result.length === 0) {\r\n            throw new Error('Aucun crime trouvé. Vérifiez que vous avez des suspects, des armes et des pièces dans la base de données.');\r\n        }\r\n\r\n        // Accès au premier enregistrement, s'il existe\r\n        const record = result[0];\r\n        \r\n        if (!record || !record.row) {\r\n            throw new Error('Format de données inattendu.');\r\n        }\r\n\r\n        // Vérifie la structure et assigne les données du crime\r\n        crime = {\r\n            suspect: record.row[0] || '',\r\n            weapon: record.row[1] || '',\r\n            room: record.row[2] || ''\r\n        };\r\n\r\n        console.log('Crime choisi :', crime);\r\n        crimeInitialized = true; // Indiquer que l'initialisation est faite\r\n\r\n        return crime; // Renvoyer l'objet crime\r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des données:', error);\r\n        return null; // Renvoyer null en cas d'erreur\r\n    }\r\n}\r\n\r\n\r\n\r\n// Fonction pour vérifier l'hypothèse\r\n// Fonction pour vérifier l'hypothèse\r\nexport const checkHypothesis = async (suspect, weapon, room, onGameOver) => {\r\n    try {\r\n        const isSuspectCorrect = suspect.trim().toLowerCase() === crime.suspect.trim().toLowerCase();\r\n        const isWeaponCorrect = weapon.trim().toLowerCase() === crime.weapon.trim().toLowerCase();\r\n        const isRoomCorrect = room.trim().toLowerCase() === crime.room.trim().toLowerCase();\r\n\r\n        // Afficher les résultats pour chaque élément\r\n        console.log(isSuspectCorrect ? \"Le suspect est correct !\" : \"Le suspect est incorrect !\");\r\n        console.log(isWeaponCorrect ? \"L'arme est correcte !\" : \"L'arme est incorrecte !\");\r\n        console.log(isRoomCorrect ? \"La salle est correcte !\" : \"La salle est incorrecte !\");\r\n\r\n        // Vérifiez si toutes les hypothèses sont correctes\r\n        if (isSuspectCorrect && isWeaponCorrect && isRoomCorrect) {\r\n            console.log(\"Vous avez gagné ! Vous avez trouvé le crime !\");\r\n            onGameOver(); // Terminez le jeu\r\n        }\r\n    } catch (error) {\r\n        console.error('Erreur lors de la vérification de l\\'hypothèse:', error);\r\n    }\r\n};\r\n\r\n\r\n// Fonction pour mettre à jour les informations sur le crime (si nécessaire)\r\nexport const setCrimeData = (newCrime) => {\r\n    crime = newCrime;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}