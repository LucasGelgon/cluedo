{"ast":null,"code":"import { executeQuery } from './neo4jConnection';\nexport async function getInitialState() {\n  try {\n    const result = await executeQuery('MATCH (r:Room) RETURN r');\n    console.log('Données récupérées:', result);\n    if (!result || !Array.isArray(result)) {\n      throw new Error('Format de données inattendu');\n    }\n    return result.map(record => ({\n      name: record.r ? record.r.properties.name : '',\n      // Retourner une chaîne vide si le nom n'est pas défini\n      occupants: [] // Adaptez cette partie selon votre modèle de données\n    }));\n  } catch (error) {\n    console.error('Erreur lors de la récupération des données:', error);\n    return []; // Retournez un tableau vide en cas d'erreur\n  }\n}\n\n// src/gameLogic.js\nexport const checkHypothesis = async (suspect, weapon, room, crime, onGameOver) => {\n  try {\n    const result = await executeQuery(`\n            MATCH (s:Suspect {name: '${suspect}'}), (w:Weapon {name: '${weapon}'}), (r:Room {name: '${room}'})\n            RETURN s, w, r\n        `);\n    if (result.length > 0) {\n      const isCorrect = {\n        suspect: suspect === crime.suspect,\n        weapon: weapon === crime.weapon,\n        room: room === crime.room\n      };\n      if (isCorrect.suspect) {\n        alert('Suspect trouvé !');\n      }\n      if (isCorrect.weapon) {\n        alert('Arme trouvée !');\n      }\n      if (isCorrect.room) {\n        alert('Salle correcte !');\n      }\n      if (isCorrect.suspect && isCorrect.weapon && isCorrect.room) {\n        alert('Vous avez gagné ! Vous avez trouvé le crime !');\n        onGameOver();\n      }\n    }\n  } catch (error) {\n    console.error('Erreur lors de la vérification de l\\'hypothèse:', error);\n  }\n};","map":{"version":3,"names":["executeQuery","getInitialState","result","console","log","Array","isArray","Error","map","record","name","r","properties","occupants","error","checkHypothesis","suspect","weapon","room","crime","onGameOver","length","isCorrect","alert"],"sources":["C:/Users/gelgo/Documents/IUT/BUT3/R5.10 - Nouveaux paradigmes de BDD/cluedo-game/src/gameLogic.js"],"sourcesContent":["import { executeQuery } from './neo4jConnection';\r\n\r\nexport async function getInitialState() {\r\n    try {\r\n        const result = await executeQuery('MATCH (r:Room) RETURN r');\r\n        console.log('Données récupérées:', result);\r\n        if (!result || !Array.isArray(result)) {\r\n            throw new Error('Format de données inattendu');\r\n        }\r\n        return result.map(record => ({\r\n            name: record.r ? record.r.properties.name : '', // Retourner une chaîne vide si le nom n'est pas défini\r\n            occupants: [] // Adaptez cette partie selon votre modèle de données\r\n        }));\r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des données:', error);\r\n        return []; // Retournez un tableau vide en cas d'erreur\r\n    }\r\n}\r\n\r\n// src/gameLogic.js\r\nexport const checkHypothesis = async (suspect, weapon, room, crime, onGameOver) => {\r\n    try {\r\n        const result = await executeQuery(`\r\n            MATCH (s:Suspect {name: '${suspect}'}), (w:Weapon {name: '${weapon}'}), (r:Room {name: '${room}'})\r\n            RETURN s, w, r\r\n        `);\r\n        \r\n        if (result.length > 0) {\r\n            const isCorrect = {\r\n                suspect: suspect === crime.suspect,\r\n                weapon: weapon === crime.weapon,\r\n                room: room === crime.room\r\n            };\r\n            \r\n            if (isCorrect.suspect) {\r\n                alert('Suspect trouvé !');\r\n            }\r\n            if (isCorrect.weapon) {\r\n                alert('Arme trouvée !');\r\n            }\r\n            if (isCorrect.room) {\r\n                alert('Salle correcte !');\r\n            }\r\n\r\n            if (isCorrect.suspect && isCorrect.weapon && isCorrect.room) {\r\n                alert('Vous avez gagné ! Vous avez trouvé le crime !');\r\n                onGameOver();\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error('Erreur lors de la vérification de l\\'hypothèse:', error);\r\n    }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;AAEhD,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACpC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMF,YAAY,CAAC,yBAAyB,CAAC;IAC5DG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,MAAM,CAAC;IAC1C,IAAI,CAACA,MAAM,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;MACnC,MAAM,IAAIK,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOL,MAAM,CAACM,GAAG,CAACC,MAAM,KAAK;MACzBC,IAAI,EAAED,MAAM,CAACE,CAAC,GAAGF,MAAM,CAACE,CAAC,CAACC,UAAU,CAACF,IAAI,GAAG,EAAE;MAAE;MAChDG,SAAS,EAAE,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZX,OAAO,CAACW,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO,EAAE,CAAC,CAAC;EACf;AACJ;;AAEA;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,UAAU,KAAK;EAC/E,IAAI;IACA,MAAMlB,MAAM,GAAG,MAAMF,YAAY,CAAC;AAC1C,uCAAuCgB,OAAO,0BAA0BC,MAAM,wBAAwBC,IAAI;AAC1G;AACA,SAAS,CAAC;IAEF,IAAIhB,MAAM,CAACmB,MAAM,GAAG,CAAC,EAAE;MACnB,MAAMC,SAAS,GAAG;QACdN,OAAO,EAAEA,OAAO,KAAKG,KAAK,CAACH,OAAO;QAClCC,MAAM,EAAEA,MAAM,KAAKE,KAAK,CAACF,MAAM;QAC/BC,IAAI,EAAEA,IAAI,KAAKC,KAAK,CAACD;MACzB,CAAC;MAED,IAAII,SAAS,CAACN,OAAO,EAAE;QACnBO,KAAK,CAAC,kBAAkB,CAAC;MAC7B;MACA,IAAID,SAAS,CAACL,MAAM,EAAE;QAClBM,KAAK,CAAC,gBAAgB,CAAC;MAC3B;MACA,IAAID,SAAS,CAACJ,IAAI,EAAE;QAChBK,KAAK,CAAC,kBAAkB,CAAC;MAC7B;MAEA,IAAID,SAAS,CAACN,OAAO,IAAIM,SAAS,CAACL,MAAM,IAAIK,SAAS,CAACJ,IAAI,EAAE;QACzDK,KAAK,CAAC,+CAA+C,CAAC;QACtDH,UAAU,CAAC,CAAC;MAChB;IACJ;EACJ,CAAC,CAAC,OAAON,KAAK,EAAE;IACZX,OAAO,CAACW,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;EAC3E;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}