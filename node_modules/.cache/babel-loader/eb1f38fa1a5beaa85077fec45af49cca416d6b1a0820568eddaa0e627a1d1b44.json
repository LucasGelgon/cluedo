{"ast":null,"code":"import { executeQuery } from './neo4jConnection';\nexport async function getInitialState() {\n  try {\n    const result = await executeQuery('MATCH (r:Room) RETURN r');\n    console.log('Données récupérées:', result);\n    if (!result || !Array.isArray(result)) {\n      throw new Error('Format de données inattendu');\n    }\n    return result.map(record => ({\n      name: record.r ? record.r.properties.name : '',\n      // Retourner une chaîne vide si le nom n'est pas défini\n      occupants: [] // Adaptez cette partie selon votre modèle de données\n    }));\n  } catch (error) {\n    console.error('Erreur lors de la récupération des données:', error);\n    return []; // Retournez un tableau vide en cas d'erreur\n  }\n}\n\n// src/gameLogic.js\nconst checkHypothesis = async (suspect, weapon, room) => {\n  const isSuspectCorrect = suspect === crime.suspect;\n  const isWeaponCorrect = weapon === crime.weapon;\n  const isRoomCorrect = room === crime.room;\n  if (isSuspectCorrect) {\n    alert(\"Le suspect est correct !\");\n  } else {\n    alert(\"Le suspect est incorrect !\");\n  }\n  if (isWeaponCorrect) {\n    alert(\"L'arme est correcte !\");\n  } else {\n    alert(\"L'arme est incorrecte !\");\n  }\n  if (isRoomCorrect) {\n    alert(\"La salle est correcte !\");\n  } else {\n    alert(\"La salle est incorrecte !\");\n  }\n\n  // Vérifiez si toutes les hypothèses sont correctes\n  if (isSuspectCorrect && isWeaponCorrect && isRoomCorrect) {\n    alert(\"Vous avez gagné ! Vous avez trouvé le crime !\");\n    onGameOver(); // Terminez le jeu\n  }\n};","map":{"version":3,"names":["executeQuery","getInitialState","result","console","log","Array","isArray","Error","map","record","name","r","properties","occupants","error","checkHypothesis","suspect","weapon","room","isSuspectCorrect","crime","isWeaponCorrect","isRoomCorrect","alert","onGameOver"],"sources":["C:/Users/gelgo/Documents/IUT/BUT3/R5.10 - Nouveaux paradigmes de BDD/cluedo-game/src/gameLogic.js"],"sourcesContent":["import { executeQuery } from './neo4jConnection';\r\n\r\nexport async function getInitialState() {\r\n    try {\r\n        const result = await executeQuery('MATCH (r:Room) RETURN r');\r\n        console.log('Données récupérées:', result);\r\n        if (!result || !Array.isArray(result)) {\r\n            throw new Error('Format de données inattendu');\r\n        }\r\n        return result.map(record => ({\r\n            name: record.r ? record.r.properties.name : '', // Retourner une chaîne vide si le nom n'est pas défini\r\n            occupants: [] // Adaptez cette partie selon votre modèle de données\r\n        }));\r\n    } catch (error) {\r\n        console.error('Erreur lors de la récupération des données:', error);\r\n        return []; // Retournez un tableau vide en cas d'erreur\r\n    }\r\n}\r\n\r\n// src/gameLogic.js\r\nconst checkHypothesis = async (suspect, weapon, room) => {\r\n    const isSuspectCorrect = suspect === crime.suspect;\r\n    const isWeaponCorrect = weapon === crime.weapon;\r\n    const isRoomCorrect = room === crime.room;\r\n  \r\n    if (isSuspectCorrect) {\r\n      alert(\"Le suspect est correct !\");\r\n    } else {\r\n      alert(\"Le suspect est incorrect !\");\r\n    }\r\n  \r\n    if (isWeaponCorrect) {\r\n      alert(\"L'arme est correcte !\");\r\n    } else {\r\n      alert(\"L'arme est incorrecte !\");\r\n    }\r\n  \r\n    if (isRoomCorrect) {\r\n      alert(\"La salle est correcte !\");\r\n    } else {\r\n      alert(\"La salle est incorrecte !\");\r\n    }\r\n  \r\n    // Vérifiez si toutes les hypothèses sont correctes\r\n    if (isSuspectCorrect && isWeaponCorrect && isRoomCorrect) {\r\n      alert(\"Vous avez gagné ! Vous avez trouvé le crime !\");\r\n      onGameOver(); // Terminez le jeu\r\n    }\r\n  };\r\n  \r\n\r\n\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mBAAmB;AAEhD,OAAO,eAAeC,eAAeA,CAAA,EAAG;EACpC,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMF,YAAY,CAAC,yBAAyB,CAAC;IAC5DG,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEF,MAAM,CAAC;IAC1C,IAAI,CAACA,MAAM,IAAI,CAACG,KAAK,CAACC,OAAO,CAACJ,MAAM,CAAC,EAAE;MACnC,MAAM,IAAIK,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,OAAOL,MAAM,CAACM,GAAG,CAACC,MAAM,KAAK;MACzBC,IAAI,EAAED,MAAM,CAACE,CAAC,GAAGF,MAAM,CAACE,CAAC,CAACC,UAAU,CAACF,IAAI,GAAG,EAAE;MAAE;MAChDG,SAAS,EAAE,EAAE,CAAC;IAClB,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZX,OAAO,CAACW,KAAK,CAAC,6CAA6C,EAAEA,KAAK,CAAC;IACnE,OAAO,EAAE,CAAC,CAAC;EACf;AACJ;;AAEA;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,EAAEC,IAAI,KAAK;EACrD,MAAMC,gBAAgB,GAAGH,OAAO,KAAKI,KAAK,CAACJ,OAAO;EAClD,MAAMK,eAAe,GAAGJ,MAAM,KAAKG,KAAK,CAACH,MAAM;EAC/C,MAAMK,aAAa,GAAGJ,IAAI,KAAKE,KAAK,CAACF,IAAI;EAEzC,IAAIC,gBAAgB,EAAE;IACpBI,KAAK,CAAC,0BAA0B,CAAC;EACnC,CAAC,MAAM;IACLA,KAAK,CAAC,4BAA4B,CAAC;EACrC;EAEA,IAAIF,eAAe,EAAE;IACnBE,KAAK,CAAC,uBAAuB,CAAC;EAChC,CAAC,MAAM;IACLA,KAAK,CAAC,yBAAyB,CAAC;EAClC;EAEA,IAAID,aAAa,EAAE;IACjBC,KAAK,CAAC,yBAAyB,CAAC;EAClC,CAAC,MAAM;IACLA,KAAK,CAAC,2BAA2B,CAAC;EACpC;;EAEA;EACA,IAAIJ,gBAAgB,IAAIE,eAAe,IAAIC,aAAa,EAAE;IACxDC,KAAK,CAAC,+CAA+C,CAAC;IACtDC,UAAU,CAAC,CAAC,CAAC,CAAC;EAChB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}